{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleWare from 'redux-thunk';\nconst initialState = {\n  counter: 0,\n  counterReset: 0,\n  tasks: []\n}; //ACTIONS\n\nexport const addCounter = () => dispatch => {\n  return dispatch({\n    type: 'ADD_COUNTER'\n  });\n};\nexport const counterReset = () => dispatch => {\n  return dispatch({\n    type: 'RESET'\n  });\n};\nexport const addTask = task => dispatch => {\n  return dispatch({\n    type: \"ADD_TASK\",\n    value: task\n  });\n};\nexport const completeTask = index => dispatch => {\n  return dispatch({\n    type: \"COMPLETE_TASK\",\n    value: index\n  });\n}; //reducer\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_COUNTER\":\n      return Object.assign({}, state, {\n        counter: state.counter + 1\n      });\n\n    case \"RESET\":\n      return Object.assign({}, state, {\n        counterReset: state.counter = 0\n      });\n\n    case \"ADD_TASK\":\n      return Object.assign({}, state, {\n        tasks: [...state.tasks, {\n          value: action.value,\n          isComplete: false\n        }]\n      });\n\n    case \"COMPLETE_TASK\":\n      const updatedTasks = state.tasks.map((item, key) => {\n        if (key == action.value) {\n          item.isComplete = true;\n        }\n\n        return item;\n      });\n      return Object.assign({}, state, {\n        tasks: updatedTasks\n      });\n\n    default:\n      return state;\n  }\n};\nexport function initializeStore() {\n  //el nombre de la funcion puede ser cualquiera. \n  return createStore(reducer, initialState, applyMiddleware(thunkMiddleWare));\n}","map":{"version":3,"sources":["/Users/chia/Desktop/Course it/Redux/combineReducersApp/src/store.js"],"names":["createStore","applyMiddleware","thunkMiddleWare","initialState","counter","counterReset","tasks","addCounter","dispatch","type","addTask","task","value","completeTask","index","reducer","state","action","Object","assign","isComplete","updatedTasks","map","item","key","initializeStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CADQ;AAEjBC,EAAAA,YAAY,EAAE,CAFG;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB,C,CAMA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAMC,QAAQ,IAAI;AACxC,SAAOA,QAAQ,CAAC;AACZC,IAAAA,IAAI,EAAE;AADM,GAAD,CAAf;AAGH,CAJM;AAMP,OAAO,MAAMJ,YAAY,GAAG,MAAMG,QAAQ,IAAI;AAC1C,SAAOA,QAAQ,CAAC;AACZC,IAAAA,IAAI,EAAE;AADM,GAAD,CAAf;AAGH,CAJM;AAMP,OAAO,MAAMC,OAAO,GAAGC,IAAI,IAAIH,QAAQ,IAAI;AACvC,SAAOA,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAE,UADQ;AAEdG,IAAAA,KAAK,EAAED;AAFO,GAAD,CAAf;AAID,CALI;AAQL,OAAO,MAAME,YAAY,GAAGC,KAAK,IAAIN,QAAQ,IAAI;AAC/C,SAAOA,QAAQ,CAAC;AACdC,IAAAA,IAAI,EAAE,eADQ;AAEdG,IAAAA,KAAK,EAAEE;AAFO,GAAD,CAAf;AAID,CALM,C,CAOT;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACR,IAAf;AACI,SAAK,aAAL;AACI,aAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,EAAyB;AAC5BZ,QAAAA,OAAO,EAAEY,KAAK,CAACZ,OAAN,GAAgB;AADG,OAAzB,CAAP;;AAGJ,SAAK,OAAL;AACI,aAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,EAAyB;AAC5BX,QAAAA,YAAY,EAAEW,KAAK,CAACZ,OAAN,GAAgB;AADF,OAAzB,CAAP;;AAGJ,SAAK,UAAL;AACI,aAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,EAAyB;AAC5BV,QAAAA,KAAK,EAAE,CAAC,GAAGU,KAAK,CAACV,KAAV,EAAiB;AAACM,UAAAA,KAAK,EAAEK,MAAM,CAACL,KAAf;AAAsBQ,UAAAA,UAAU,EAAE;AAAlC,SAAjB;AADqB,OAAzB,CAAP;;AAGJ,SAAK,eAAL;AACI,YAAMC,YAAY,GAAGL,KAAK,CAACV,KAAN,CAAYgB,GAAZ,CAAgB,CAACC,IAAD,EAAOC,GAAP,KAAa;AAC9C,YAAIA,GAAG,IAAIP,MAAM,CAACL,KAAlB,EAAyB;AACrBW,UAAAA,IAAI,CAACH,UAAL,GAAiB,IAAjB;AACH;;AACD,eAAOG,IAAP;AACH,OALoB,CAArB;AAMA,aAAOL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,EAAyB;AAC5BV,QAAAA,KAAK,EAAEe;AADqB,OAAzB,CAAP;;AAGJ;AACI,aAAOL,KAAP;AAxBR;AA0BH,CA3BM;AA6BP,OAAO,SAASS,eAAT,GAA2B;AAAE;AAChC,SAAOzB,WAAW,CAACe,OAAD,EAAUZ,YAAV,EAAwBF,eAAe,CAACC,eAAD,CAAvC,CAAlB;AACH","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleWare from 'redux-thunk';\n\nconst initialState = {\n    counter: 0,\n    counterReset: 0,\n    tasks: []\n};\n\n//ACTIONS\nexport const addCounter = () => dispatch => {\n    return dispatch({\n        type: 'ADD_COUNTER'\n    })\n}\n\nexport const counterReset = () => dispatch => {\n    return dispatch({\n        type: 'RESET'\n    })\n}\n\nexport const addTask = task => dispatch => {\n    return dispatch({\n      type: \"ADD_TASK\",\n      value: task\n    });\n  };\n\n  \n  export const completeTask = index => dispatch => {\n    return dispatch({\n      type: \"COMPLETE_TASK\",\n      value: index\n    });\n  };  \n\n//reducer\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"ADD_COUNTER\":\n            return Object.assign({}, state, {\n                counter: state.counter + 1\n            })\n        case \"RESET\":\n            return Object.assign({}, state, {\n                counterReset: state.counter = 0\n            })\n        case \"ADD_TASK\":\n            return Object.assign({}, state, {\n                tasks: [...state.tasks, {value: action.value, isComplete: false}]\n            })\n        case \"COMPLETE_TASK\":\n            const updatedTasks = state.tasks.map((item, key)=>{\n                if (key == action.value) {\n                    item.isComplete= true\n                }\n                return item\n            })\n            return Object.assign({}, state, {\n                tasks: updatedTasks\n            })\n        default:\n            return state;\n    }\n};\n\nexport function initializeStore() { //el nombre de la funcion puede ser cualquiera. \n    return createStore(reducer, initialState, applyMiddleware(thunkMiddleWare));\n}"]},"metadata":{},"sourceType":"module"}